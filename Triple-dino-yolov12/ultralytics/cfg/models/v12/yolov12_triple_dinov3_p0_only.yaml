# YOLOv12 ðŸš€, AGPL-3.0 license
# YOLOv12 Triple Input with P0 DINOv3 preprocessing ONLY
# This config shows the CORRECT P0 pattern from reference repository

# Parameters
nc: 80 # number of classes  
ch: 9  # input channels for triple input
scales: # model compound scaling constants
  # [depth, width, max_channels]
  n: [0.50, 0.25, 1024]
  s: [0.50, 0.50, 1024] 
  m: [0.50, 1.00, 512]
  l: [1.00, 1.00, 512]
  x: [1.00, 1.50, 512]

# P0 DINOv3 preprocessing configuration (following reference repo pattern)
dinov3:
  model_size: "small"        # DINOv3 model size: small, base, large, giant
  freeze: true               # Freeze DINOv3 backbone during training
  use_triple_branches: false # Use separate DINOv3 branches for each input
  p0_preprocessing: true     # Enable P0 input preprocessing (handled in training script)
  p0_output_channels: 64     # Output channels from P0 DINOv3 preprocessing
  image_size: 224           # Input image size for DINOv3
  integration_points: ["p0"] # P0 preprocessing only

# YOLO12-triple backbone (receives P0 DINOv3 preprocessed input)
# P0 DINOv3 preprocessing happens BEFORE backbone in training script
backbone:
  # [from, repeats, module, args]
  
  # Backbone starts with regular Conv (input comes from P0 DINOv3 preprocessing)
  # Input channels will be dynamically set by training script based on P0 DINOv3 output
  - [-1, 1, Conv,  [64, 3, 2]]             # 0-P1/2 (receives P0 DINOv3 preprocessed input)
  - [-1, 2, C3k2,  [64, False, 0.25]]      # 1  
  - [-1, 1, Conv,  [128, 3, 2]]            # 2-P2/4
  - [-1, 2, C3k2,  [128, False, 0.25]]     # 3-P3 stage
  - [-1, 1, Conv,  [256, 3, 2]]            # 4-P4/16
  - [-1, 4, A2C2f, [256, True, 4]]         # 5
  - [-1, 1, Conv,  [512, 3, 2]]            # 6-P5/32
  - [-1, 4, A2C2f, [512, True, 1]]         # 7

# Standard YOLOv12 head
head:
  - [-1, 1, nn.Upsample, [None, 2, "nearest"]]  # 8
  - [[-1, 5], 1, Concat, [1]] # cat backbone P4        # 9
  - [-1, 2, A2C2f, [256, False, -1]]                   # 10

  - [-1, 1, nn.Upsample, [None, 2, "nearest"]]  # 11
  - [[-1, 3], 1, Concat, [1]] # cat backbone P3        # 12
  - [-1, 2, A2C2f, [128, False, -1]]                   # 13

  - [-1, 1, Conv, [128, 3, 2]]                         # 14
  - [[-1, 10], 1, Concat, [1]] # cat head P4           # 15
  - [-1, 2, A2C2f, [256, False, -1]]                   # 16

  - [-1, 1, Conv, [256, 3, 2]]                         # 17
  - [[-1, 7], 1, Concat, [1]] # cat head P5            # 18
  - [-1, 2, C3k2, [512, True]]                         # 19

  - [[13, 16, 19], 1, Detect, [nc]]                    # Detect(P3, P4, P5)